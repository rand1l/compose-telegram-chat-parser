services:
  postgres:
    image: postgres:17-alpine3.20
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql.conf"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
      - ./conf/postgresql.conf:/etc/postgresql.conf:ro
      - ./chatlists:/chatlists
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - bot-network
      - postgres

  postgres_exporter:
    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_URI: "postgres:5432/habrdb?sslmode=disable"
      DATA_SOURCE_USER: "user"
      DATA_SOURCE_PASS: "pgpwd"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 800M
    networks:
      - bot-network
      - postgres
  
  minio1:
    image: quay.io/minio/minio
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    expose:
      - "9000"
      - "9001"
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
    networks:
      - bot-network

  minio2:
    image: quay.io/minio/minio
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    expose:
      - "9000"
      - "9001"
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    networks:
      - bot-network

  minio3:
    image: quay.io/minio/minio
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    expose:
      - "9000"
      - "9001"
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2
    networks:
      - bot-network

  minio4:
    image: quay.io/minio/minio
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    expose:
      - "9000"
      - "9001"
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2
    networks:
      - bot-network

  nginx:
    image: nginx:1.19.2-alpine
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      - bot-network

  createbuckets:
    image: minio/mc
    depends_on:
      - nginx
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio http://nginx:9000 minioadmin minioadmin) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb myminio/test;
      /usr/bin/mc policy download myminio/test;
      exit 0;
      "
    networks:
      - bot-network
      
  userbot_1:
    build: .
    container_name: userbot_1
    environment:
      - API_ID= #INSERT THE USERBOT ID HERE
      - API_HASH= #INSERT THE USERBOT HASH HERE
      - SESSION_NAME=sessions/userbot_session_1
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./sessions:/app/sessions
    stdin_open: true
    tty: true
    depends_on:
      - postgres
      - minio1
      - minio2
      - minio3
      - minio4
    networks:
      - bot-network

  userbot_2:
   build: .
   container_name: userbot_2
   environment:
     - API_ID= #INSERT THE USERBOT ID HERE
     - API_HASH= #INSERT THE USERBOT HASH HERE
     - SESSION_NAME=sessions/userbot_session_2
     - POSTGRES_DB=${POSTGRES_DB}
     - POSTGRES_USER=${POSTGRES_USER}
     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
   volumes:
     - ./sessions:/app/sessions
   stdin_open: true
   tty: true
   depends_on:
      - postgres
      - minio1
      - minio2
      - minio3
      - minio4
   networks:
      - bot-network

volumes:
  db-data:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

networks:
  bot-network:
    driver: bridge
  postgres:
    driver: bridge
